package de.marketsim.util;

/**
 * <p>Überschrift: Market Simulator</p>
 * <p>Beschreibung: </p>
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Organisation: </p>
 * @author Xining Wang
 * @version 1.0
 */

import java.util.*;
import java.text.*;
import java.io.*;
import org.apache.log4j.*;
import de.marketsim.config.Configurator;
import de.marketsim.util.DataFormatter;

public class PriceStatistic
{

  // Number Output Formatter
  DataFormatter nff = new DataFormatter ( Configurator.mConfData.mDataFormatLanguage);

  Logger mLogger;

  public PriceStatistic()
  {
     this.mLogger = MsgLogger.getMsgLogger("STATISTIC");
  }

  public double getMax( double pData[] )
  {
    int  n = pData.length;
    double max = Integer.MIN_VALUE;
    for ( int i=0; i<n; i++)
    {
         if ( pData[i] > max )
         {
            max = pData[i];
         }
    }
    return max;
  }

  public double getMin( double pData[])
  {
    int  n = pData.length;
    double min = Integer.MAX_VALUE;
    for ( int i=0; i<n; i++)
    {
         if ( pData[i] < min )
         {
            min = pData[i];
         }
    }
    return min;
  }

  public double getAverage( double pData[])
  {
    int n = pData.length;
    double sum1 = 0.0;
    for (int i=0; i<n; i++)
    {
       sum1 = sum1+ pData[i];
    }
    return sum1 / n;
  }

  public double getSchiefe( double pData[] )
  {
      int n = pData.length;
      double average = this.getAverage( pData );
      double stdev   = this.getstdev( pData);
      double sum0 = 0.0;
      for ( int i=0; i<n; i++)
      {
           double dd = (  ( pData[i] - average ) / stdev );
           sum0 = sum0 + dd*dd*dd;
      }

      double  f1 =  n*1.0 / ( (n-1)*(n-2)*1.0 );

      double schiefe = f1 * sum0 ;

      return schiefe;
    }

    // create standard abweichung
    // standard deviation

    public double getstdev( double pData[])
    {

      int n = pData.length;

      double sum1 = 0.0;
      for (int i=0; i<n; i++)
      {
         sum1 = sum1+ pData[i];
      }

      double sum2 = 0.0;
      for (int i=0; i<n; i++)
      {
         sum2 = sum2 + pData[i]*pData[i];
      }

      double fenzi = n * sum2 - sum1*sum1;
      double fenmu = n * (n-1);
      double kanfanqian = fenzi / fenmu;
      double stdev = java.lang.Math.sqrt( kanfanqian );
      //System.out.println( "stand deviation="  + stdev );
      return stdev;
    }

    public double getkurt( double pData[] )
    {
      int n = pData.length;
      double average = this.getAverage( pData );
      double stdev   = this.getstdev( pData);

      double sum0 = 0.0;
      for ( int i=0; i<n; i++)

      {
           double dd = (  ( pData[i] - average ) / stdev );
           sum0 = sum0 + dd*dd*dd*dd;
      }

      double  f1 =  n*(n+1)*1.0 / ( (n-1) * 1.0 * (n-2) * (n-3)  );
      double  f2 =  3*(n-1)*(n-1)*1.0 / ( (n-2)*(n-3)*1.0 );

      System.out.println ( "calculate Kurtosis" );

      System.out.println ( "average=" + average );
      System.out.println ( "stdev=" + stdev );
      System.out.println ( "sum0=" + sum0 );
      System.out.println ( "f1=" + f1 );
      System.out.println ( "f2=" + f2 );

      double kurt = f1 * sum0 - f2;
      System.out.println ( "Kurtosis is calculated, Kurt=" + kurt  );

      return kurt;
    }

    public double[] getLogRenditen( double pData[])
    {
      int n = pData.length;
      double  logrenditen[] = new double[n-1];
      for ( int i=1; i<n; i++)
      {
           //logrenditen[i-1] = Math.log( pData[i] / pData[i-1] ) / Math.log(10.0);
           logrenditen[i-1] = Math.log( pData[i] / pData[i-1] ) ;
           //System.out.println( "logrendit=" + logrenditen[i-1] );
      }
      return logrenditen;
    }

  public double[] calculateHillData(double pData[], int pDataRequiered )
  {
      int nn = pDataRequiered;
      if ( nn > pData.length - 1 )
      {
        nn = pData.length - 1;
      }

      double result[] = new double[ nn ];
      for ( int j=1; j<=nn; j++)
      {
          double sum = 0.0;
          for ( int i=0; i<=j-1; i++)
          {
             sum = sum + Math.log( pData[i]/pData[j] )/ Math.log( 10.0 );
          }
          sum = sum / (j+1);

          if ( sum != 0 )
          {
             sum = 1 / sum;
          }
          else
          {
             System.out.println(" !!! Error !!! , Ziwschen-Ergebnis ist 0. Der Hill-Wert ist ignoriert, auf 0 gesetzt. !!!!!! ");
             sum = 0.0;
          }
          result[j-1] = sum;
          //System.out.println(" dd= " + sum);
      }
      return result;
  }

    /**
     * Calculate Hill_Estmator
     * @param pData: Daily Price Data
     * @param pProzent: absolute value: 0.05 = 5%
     * @param pSortedLogrenditenFile: Sorted Logrenditen Data
     * @return
     */
    public double[]  getHill_Estimator( double pData[], double pProzent, String pSortedLogrenditenFile )
    {
      System.out.println( "creating Hill_Estimator for " + pData.length + " DataItems" );
      int n = pData.length;
      Vector logRenditen  = new Vector();

      System.out.println( "at first creates absolute log-renditen of prices from day 301 ...." );

      for ( int i=1; i<n; i++)
      {
           double hill_value = Math.abs(  Math.log( pData[i] / pData[i-1] ) / Math.log( 10.0 ) );
           logRenditen.add(  new Double( hill_value ) );
      }

      System.out.println( "sorting log-renditen (descending)" );

      java.util.Collections.sort( logRenditen, new LogRenditenComparator() );

      // coverting data from vector to double array
      double logrenditenarray[] = new double[logRenditen.size()];
      for ( int i=0; i<logRenditen.size(); i++)
      {
         logrenditenarray[i] =  ((Double) logRenditen.elementAt(i) ).doubleValue();
      }

      System.out.println( "Printing sorted log-renditen ..." );
      PrintWriter  logrenditen_sorted = null;

      if ( pSortedLogrenditenFile != null )
      {
          try
          {
              logrenditen_sorted = new PrintWriter ( new FileOutputStream( pSortedLogrenditenFile )  );
          }
          catch (Exception ex)
          {
              System.out.println("Error: can not create file logrenditen-sorted.csv Error: " + ex.getMessage() );
              logrenditen_sorted = null;
          }
      }

      for ( int i=0; i<logRenditen.size(); i++)
      {
         System.out.println( i + ";" +  logrenditenarray[i] );
         if ( logrenditen_sorted != null )
         {
            try
            {
              logrenditen_sorted.println( i + ";" + nff.format2str( logrenditenarray[i] ) );
            }
            catch (Exception ex)
            {
            }
         }
      }
      // close this file
      if ( logrenditen_sorted != null )
      {
            try
            {
              logrenditen_sorted.close();
            }
            catch (Exception ex)
            {
            }
      }
      // Calculating the Hill-Estimator

      int Hill_Estimator_Size = (int) ( logrenditenarray.length * pProzent );

      if ( Hill_Estimator_Size == 0 )
      {
        // but at least 1
        Hill_Estimator_Size = 1;
      }

      if ( Hill_Estimator_Size >= n )
      {
        Hill_Estimator_Size = n - 1;
      }

      System.out.println( "Calculating the HillEstimator ..." );

      double Hill_Data[] = this.calculateHillData( logrenditenarray, Hill_Estimator_Size );

      double Hill_Estimator[] = new double[ Hill_Data.length ];

      System.out.println( "getting first " + Hill_Data.length + " Hill_Data as Hill-Estimator..." );

      System.out.println( "Hill-Data.Length=" + Hill_Data.length );

      for ( int i=0; i<Hill_Estimator_Size; i++)
      {
           Hill_Estimator[ i ] = Hill_Data[i];
      }
      return  Hill_Estimator;
    }

    // Descending sorting
    class LogRenditenComparator implements Comparator
    {
        public int compare(Object o1, Object o2)
        {
            int cc = ((Double)o1).compareTo((Double) o2  );
            return (cc < 0 ? 1 : cc > 0 ? -1 : 0);
        }
    }

    public AutoKorrelation getAutoKorrelation(double pData[], int pRequiredRelationNumber )
    {

        AutoKorrelation result = new AutoKorrelation();
        int N = pData.length;
        // get the average of the data
        double average = this.getAverage( pData );
        // define the array for storing the autocovarince
        double autocovarince[] = new double[ pRequiredRelationNumber ];
        //System.out.println( "average="+average);

        // calculating the autocovanrice
        for (int tao=0; tao<pRequiredRelationNumber; tao++)
        {
             double sum = 0.0;
             for ( int t=0; t < ( N - tao )  ; t++)
             {
                sum = sum + ( pData[ t ] - average ) * ( pData[ t + tao ] - average );
             }
             autocovarince[tao] = sum / N;
             //System.out.println( "c["+tao+"]="+ autocovarince[ tao ] );
        }

        double autocorrelation[] = new double[ pRequiredRelationNumber ];

        //calculating the autocorrelation
        for (int i=0; i<pRequiredRelationNumber; i++)
        {
           autocorrelation[i] = autocovarince[i] / autocovarince[0];
           //System.out.println( "autocorrelation["+i+"]="+autocorrelation[i] );
        }
        result.autokovarinz = autocovarince;
        result.korrelation = autocorrelation;
        return result;
    }

    // Daten sind in Vector mit Double Werte

    public double getKorrelation(double pDataX[], double pDataY[])
    {
       double korrelation = 0.0;
       int N = pDataX.length;

       // sigmax^2 = SUMME( (DATAX[i] - X_AVERAGE ) ^2 ) / N
       // sigmay^2 = SUMME( (DATAY[i] - Y_AVERAGE ) ^2 ) / N

       double sum = 0.0;
       double x_average = this.getAverage( pDataX );
       for (int i=0; i<N; i++)
       {
          sum = sum + ( pDataX[i] - x_average ) * ( pDataX[i] - x_average );
       }
       sum = sum / N;
       double sigmax = java.lang.Math.sqrt( sum ) ;

       sum = 0.0;
       double y_average = this.getAverage( pDataY );
       for (int i=0; i<N; i++)
       {
          sum = sum + ( pDataY[i] - y_average ) * ( pDataY[i] - y_average );
       }
       sum = sum / N;
       double sigmay = java.lang.Math.sqrt( sum ) ;

       // covarince = SUMME( (pDataX[i] - xaverage ) * ( pDataY[i] - yaverage ) ) / N;
       double covarince = 0.0;
       sum = 0.0;
       for (int i=0; i<N; i++)
       {
          sum = sum + ( pDataX[i] - x_average ) * ( pDataY[i] - y_average );
       }
       covarince = sum / N;

       korrelation =covarince / ( sigmax * sigmay );
       System.out.println("sigmax=" + sigmax );
       System.out.println("sigmay=" + sigmay );

       System.out.println("covarince=" + covarince );
       System.out.println("correlation=" + korrelation);
       return korrelation;

    }

    public static void main(String[] args)
    {

      PriceStatistic pp= new PriceStatistic();
      double Data1[] = {1345, 1301, 1368, 1322, 1310, 1370, 1318, 1350, 1303, 1299};
      // Excel Beispiel: Return:
      pp.getstdev( Data1 );

      double Data2[] ={3,4,5,2,3,4,5,6,4,7};

      // Excel Beispiel: Return:
      //KURT(3,4,5,2,3,4,5,6,4,7) returns -0.1518
      pp.getkurt( Data2 );
      System.out.println(""+pp.getkurt( Data2 ));

      // Excel Beispiel: Return:
      //Schiefe(3,4,5,2,3,4,5,6,4,7) returns -0.359543
      pp.getSchiefe( Data2 );

      double Data3[] ={3,4,5,2,3,4,5,6,4,7};

      double sdata[] = { 0.101161,0.092155,0.074224,0.054760,0.054488 };

      double res[] = pp.calculateHillData( sdata, 3);

      double datax[] = { 3,2,4,5,6};
      double datay[] = {9,7,12,15,17};

      pp.getKorrelation( datax, datay );

      double dataz[] = {73,49,94,86,74,88,25,55,41,2,86,4,53,37,44,58,63,56,70,96,44,29,19,62,69,28,56,46,20,15,64,73,99,76,62,31,20,77,80,86,97,89,71,25,6,57};

      pp.getAutoKorrelation( dataz, 20 );

    }

    /**
     * @param pPrise
     * @return
     */

    public double calculateVolatility_old(double[] pPrice)
    {
       double v = 0.0;
       for (int i = 1; i<pPrice.length; i++)
       {
           v = v + Math.abs (1.0*( pPrice[i]-pPrice[i-1] )/ pPrice[i-1]);
       }
        v =  v*100/( pPrice.length-1 );
        return v;
   }

   public double calculateVolatility_new(double[] pPrice)
   {
      double v = 0.0;
      for (int i = 2; i<pPrice.length; i++)
      {
          double p = (pPrice[i] - pPrice[i-1]) * 100.0 / pPrice[i-1];
          v = v + ( p*p );
      }
      double result = v *100/ ( pPrice.length-1 );
      return result;
  }

    public double calculateDistortion(double[] pPrice, double[] pInnererwert)
      {
       double v = 0.0;
       for (int i = 0; i<pPrice.length; i++)
       {
        v = v+ Math.abs ( 1.0*(pPrice[i]-pInnererwert[i]) /pInnererwert[i]);

       }
        v =  v*100/(pPrice.length);
        return v;
    }

}