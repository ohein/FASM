package de.marketsim.gui.graph;

/**
 * <p>Überschrift: Mircomarket Simulator</p>
 * <p>Beschreibung: </p>
 * <p>Copyright: Copyright (c) 2006</p>
 * <p>Organisation: </p>
 * @author Xining Wang
 * @version 1.0
 */

import java.awt.BorderLayout;
import java.awt.geom.Point2D;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.lang.System;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;

import edu.uci.ics.jung.graph.Graph;
import edu.uci.ics.jung.graph.Vertex;
import edu.uci.ics.jung.graph.decorators.EdgeShape;
import edu.uci.ics.jung.graph.decorators.DefaultToolTipFunction;

import edu.uci.ics.jung.graph.decorators.NumberVertexValue;
import edu.uci.ics.jung.graph.decorators.UserDatumNumberVertexValue;
import edu.uci.ics.jung.graph.decorators.VertexPaintFunction;

//import edu.uci.ics.jung.graph.impl.DirectedSparseEdge;
//import edu.uci.ics.jung.graph.impl.DirectedSparseGraph;
//import edu.uci.ics.jung.graph.impl.DirectedSparseVertex;
import edu.uci.ics.jung.graph.impl.UndirectedSparseEdge;
import edu.uci.ics.jung.graph.impl.UndirectedSparseGraph;
import edu.uci.ics.jung.graph.impl.UndirectedSparseVertex;
import edu.uci.ics.jung.visualization.FRLayout;
import edu.uci.ics.jung.visualization.GraphZoomScrollPane;
import edu.uci.ics.jung.visualization.PersistentLayout;
import edu.uci.ics.jung.visualization.PersistentLayoutImpl;
import edu.uci.ics.jung.visualization.PluggableRenderer;

import edu.uci.ics.jung.visualization.contrib.KKLayout;
import edu.uci.ics.jung.visualization.contrib.CircleLayout;

import edu.uci.ics.jung.visualization.control.LayoutScalingControl;
import edu.uci.ics.jung.visualization.control.ScalingControl;
import edu.uci.ics.jung.algorithms.shortestpath.UnweightedShortestPath;

//import edu.uci.ics.jung.visualization.ShapePickSupport;
import edu.uci.ics.jung.visualization.VisualizationViewer;
import edu.uci.ics.jung.visualization.VertexShapeFactory;
import edu.uci.ics.jung.visualization.control.DefaultModalGraphMouse;

import edu.uci.ics.jung.utils.UserDataContainer;


/**
 * Demonstrates the use of <code>PersistentLayout</code>
 * and <code>PersistentLayoutImpl</code>.
 * This demo also shows ToolTips on graph vertices.
 *
 * @author Tom Nelson - RABA Technologies
 *
 */
public class WangDemo {

   VertexShapeFactory mVertexShapeFactory = new VertexShapeFactory();

    /**
     * the graph
     */
    Graph graph;

    /**
     * the name of the file where the layout is saved
     */
    String fileName;

    /**
     * the visual component and renderer for the graph
     */

    VertexShapeImpl  myshapeimpl ;

    VisualizationViewer vv;


    /**
     * create an instance of a simple graph with controls to
     * demo the persistence and zoom features.
     *
     * @param fileName where to save/restore the graph positions
     */
    public WangDemo()
    {
        // create a simple graph for the demo
        graph = new UndirectedSparseGraph();
        Vertex[] v = this.createVertices(10);
        this.createEdges(v);

        //final PersistentLayout layout = new PersistentLayoutImpl(new FRLayout(graph));
        UnweightedShortestPath pathcalculator = new UnweightedShortestPath( graph );

        final KKLayout layout = new KKLayout(graph, pathcalculator );

        //final CircleLayout layout = new CircleLayout(graph );

        // the PersistentLayout delegates to another GraphLayout until you
        // perform a 'restore'

        // PluggableRenderer means: ansteckbar Erbringer, Ersteller, Ausführer
        PluggableRenderer pr = new PluggableRenderer();


        //myshapeimpl = new VertexShapeImpl(  );

        //pr.setVertexShapeFunction( myshapeimpl );

        pr.setVertexPaintFunction( new VertexPaintFunctionImpl(null) );
        //pr.setEdgePaintFunction( new EdgePaintImpl() );
        //pr.setEdgeShapeFunction( new EdgeShapeImpl() );

        vv = new VisualizationViewer( layout, pr);

        // add my listener for ToolTips
        vv.setToolTipFunction(new DefaultToolTipFunction());
        //vv.setPickSupport(new ShapePickSupport());
        DefaultModalGraphMouse gm = new DefaultModalGraphMouse();
        vv.setGraphMouse(gm);

        //ScalingControl scaler = new LayoutScalingControl();
        //scaler.scale( vv, (float) 0.40, vv.getCenter() );

        // create a frome to hold the graph
        final JFrame frame = new JFrame();
        frame.getContentPane().add(new GraphZoomScrollPane(vv));
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(600, 600);
        frame.setVisible(true);
    }

    /**
     * create some vertices
     * @param count how many to create
     * @return the Vertices in an array
     */
    private Vertex[] createVertices(int count) {
        Vertex[] v = new Vertex[count];
        for (int i = 0; i < count; i++)
        {
//            Vertex vv = new DirectedSparseVertex();
            Vertex vv = new UndirectedSparseVertex();
            //vv.setUserDatum("AA", "BB",  UserDataContainer.CopyAction.Shared()  );
            //System.out.println(vv.toString());
            v[i] = graph.addVertex( vv);
        }
        return v;
    }

    /**
     * create edges for this demo graph
     * @param v an array of Vertices to connect
     */
    void createEdges(Vertex[] v) {
        graph.addEdge(new UndirectedSparseEdge(v[0], v[1]));
        graph.addEdge(new UndirectedSparseEdge(v[2], v[3]));
        graph.addEdge(new UndirectedSparseEdge(v[0], v[4]));
        graph.addEdge(new UndirectedSparseEdge(v[1], v[2]));
        graph.addEdge(new UndirectedSparseEdge(v[3], v[9]));
        graph.addEdge(new UndirectedSparseEdge(v[6], v[2]));
        graph.addEdge(new UndirectedSparseEdge(v[7], v[1]));
        graph.addEdge(new UndirectedSparseEdge(v[8], v[2]));
        graph.addEdge(new UndirectedSparseEdge(v[3], v[8]));
        graph.addEdge(new UndirectedSparseEdge(v[6], v[7]));
        graph.addEdge(new UndirectedSparseEdge(v[4], v[5]));
        graph.addEdge(new UndirectedSparseEdge(v[0], v[9]));
    }

    /**
     * a driver for this demo
     * @param args should hold the filename for the persistence demo
     */
    public static void main(String[] args)
    {
        new WangDemo();
    }
}


