package de.marketsim.util;

/**
 * <p>Überschrift: FASM Frankfurt Articial Simulation Market</p>
 * <p>Beschreibung: Mircomarket Simulator </p>
 * <p>Copyright: Copyright (c) 2007</p>
 * <p>Organisation: </p>
 * @author Xining Wang
 * @version 1.0
 */

import java.util.Hashtable;
import java.util.Vector;
import java.util.*;
import java.text.NumberFormat;
import de.marketsim.SystemConstant;
import de.marketsim.config.Configurator;
import de.marketsim.util.DepotRecord;
import de.marketsim.util.DataFormatter;
import de.marketsim.util.HTMLCreator;

public class GewinnProcessor
{

  // Agent Name ist Key
  public Vector  mDepotList     = new Vector();

  // AgentType ist key
  public Hashtable  mAgentTypeList = null;

  // AgentTypeName ist key
  // Content ist AgentGroupStatisticWert
  private Hashtable  mGroupStatic   = new  Hashtable();

  private DataFormatter  mDataFormatter = null;

  public static GewinnProcessor mGewinnProcessor = new GewinnProcessor();

  public GewinnProcessor()
  {
      mDataFormatter = new DataFormatter("Germany");
  }

  public void setAgentTypeList( Hashtable pTypeList)
  {
      mAgentTypeList = pTypeList;
      mDataFormatter.setMaxFractionDigits(5);
  }

  public int getAnzahlDepotRecord()
  {
      return this.mDepotList.size();
  }

  /* Sortierung von Gross --> Klein
     Sortiert den gesamte DepotList
  */

  public DepotRecord[] sortedbyRelativeGewinn()
  {

    DepotRecord  temp[] = new DepotRecord[ this.mDepotList.size() ];

    Object tt[] = this.mDepotList.toArray();

    for ( int i=0; i <tt.length-1; i++ )
    {
      for ( int j=i+1; j< tt.length; j++ )
      {
        DepotRecord d2 = ( DepotRecord ) tt[j];
        if ( d2.mRelativeGewinnProzent > ( ( DepotRecord ) tt[i] ).mRelativeGewinnProzent )
        {
             // swap these two objects
             DepotRecord  pp = d2;
             tt[j] = tt[i];
             tt[i] = pp;
        }
      }
    }

    for ( int i=0; i < tt.length; i++ )
    {
       temp[i] = ( DepotRecord ) tt[ i ];
    }
    return temp;
  }

  /**
   * Basic sortierung Function
   * Sortierung von Gross --> Klein
   * Input: Vector
   * @return
   */

  public static DepotRecord[] sortedbyAbsoluteGewinn( Vector pDepotList  )
  {
      Object tt[] = pDepotList.toArray();
      DepotRecord dd[] = new DepotRecord[tt.length];
      for ( int i=0; i< tt.length; i++ )
      {
          dd[i] = (DepotRecord) tt[i];
      }
      return sortedbyAbsoluteGewinn( dd );
  }

  /**
   * Basic sortierung Function
   * Sortierung von Gross --> Klein
   * Input: Array
   * @return
   */

  public static DepotRecord[] sortedbyAbsoluteGewinn( DepotRecord pDepotList[] )
  {

    DepotRecord  temp[] = new DepotRecord[ pDepotList.length ];
    System.out.println( "==================================================" );
    for ( int i=0; i < pDepotList.length-1; i++ )
    {
      for ( int j=i+1; j < pDepotList.length; j++ )
      {
        DepotRecord d2 = pDepotList[j];
        if ( d2.mAbsoluteGewinnProzent >  pDepotList[i].mAbsoluteGewinnProzent )
        {
             // swap these two objects
             DepotRecord  pp = pDepotList[j];
             pDepotList[j] = pDepotList[i];
             pDepotList[i] = pp;
        }
      }

      //System.out.println( "i=" + i + "  ==================" );
      //printDepotRecord(  pDepotList[i], System.out );

    }

    for ( int i=0; i < pDepotList.length; i++ )
    {
       temp[i] = pDepotList[ i ];
    }
    return temp;

  }

  /**
   * Basis Function
   * Sorted by Agent Name
   * Input:  DepotList   in Vector Form
   * Return: sorted DepotList by Name
   *
   * @return
   */

  public static DepotRecord[] sortedbyName( Vector pDepotList  )
  {
    Object tt[] = pDepotList.toArray();
    return sortedbyName( tt );
  }
  /**
   * Basis Function
   * Sorted by Agent Name
   * Input:  DepotList
   * Return: sorted DepotList by Name
   *
   * @return
   */

  public static DepotRecord[] sortedbyName( Object[] pDepotList )
  {
    DepotRecord  temp[] = new DepotRecord[ pDepotList.length ];

    for ( int i=0; i < pDepotList.length-1; i++ )
    {
      for ( int j=i+1; j < pDepotList.length; j++ )
      {
        DepotRecord d2 = ( DepotRecord ) pDepotList[j];
        DepotRecord dx = ( DepotRecord ) pDepotList[i];

        int n1 = Integer.MAX_VALUE;
        int n2 = Integer.MAX_VALUE;
        try
        {
            n1 = Integer.parseInt( d2.mAgentName.substring( 1 ) );
        }
        catch (Exception ex)
        {

        }
        try
        {
            n2 = Integer.parseInt( dx.mAgentName.substring( 1 ) );
        }
        catch (Exception ex)
        {

        }

        if (  n1 < n2 )  // switch
        {
             // swap these two objects
             Object  pp = pDepotList[j];
             pDepotList[j] = pDepotList[i];
             pDepotList[i] = pp;
        }
      }
      System.out.println( "i=" + i + "  ==================" );
      //printDepotRecord(  (DepotRecord) pDepotList[i], System.out );

    }

    for ( int i=0; i < pDepotList.length; i++ )
    {
       temp[i] = ( DepotRecord ) pDepotList[ i ];
    }
    return temp;
  }

  public static DepotRecord[] getDepotListByType( int pType, Vector pGesamtList )
  {
       Vector temp = new Vector();
       for ( int i=0; i < pGesamtList.size(); i++ )
       {
            DepotRecord dd = ( DepotRecord ) pGesamtList.elementAt(i);
            if ( dd.mAgentInitType == pType )
            {
              temp.add(dd);
            }
       }
       DepotRecord results[] = new DepotRecord[ temp.size() ];
       for ( int i=0; i <temp.size(); i++)
       {
           results[i] = ( DepotRecord ) temp.elementAt(i);
       }
       return results;
  }

  /**
   * Basic function for statistic by AgentGroup
   * Input:  Agent DepotList
   * Return:  Group Average Statistic
   */

  public static AgentGroupStatisticBasicWert CreateGroupStatistik( DepotRecord pDepotList[] )
  {
    AgentGroupStatisticBasicWert  grpstatistic  = new AgentGroupStatisticBasicWert();

    grpstatistic.mAbsoluteGewinnProcent_Max = -1000000000;
    grpstatistic.mAbsoluteGewinnProcent_Min = Double.MAX_VALUE;

    grpstatistic.mRelativeGewinnProcent_Max = -1000000000;
    grpstatistic.mRelativeGewinnProcent_Min = Double.MAX_VALUE;

    if ( pDepotList.length == 0 )
    {
      return grpstatistic;
    }

    grpstatistic.mAgentAnzahl  = pDepotList.length;

    for ( int i=0; i <pDepotList.length; i++ )
    {

      DepotRecord d1 = pDepotList[i];
      grpstatistic.mBuyMenge_Total              = grpstatistic.mBuyMenge_Total  + d1.mTotalBuyStuck;
      grpstatistic.mSellMenge_Total             = grpstatistic.mSellMenge_Total + d1.mTotalSellStuck;
      grpstatistic.mTypeChangeCounter           = grpstatistic.mTypeChangeCounter + d1.mTypeChangeCounter;

      grpstatistic.mAgentNameList =   grpstatistic.mAgentNameList + d1.mAgentName + ";";
      /***************************************************************/
      grpstatistic.mRelativeGewinnProcent_Summe = grpstatistic.mRelativeGewinnProcent_Summe + d1.mRelativeGewinnProzent;

      if ( d1.mRelativeGewinnProzent > grpstatistic.mRelativeGewinnProcent_Max )
      {
        grpstatistic.mRelativeGewinnProcent_Max          = d1.mRelativeGewinnProzent;
        grpstatistic.mRelativeGewinnProcent_Max_Besitzer = d1.mAgentName;
      }

      if ( d1.mRelativeGewinnProzent < grpstatistic.mRelativeGewinnProcent_Min )
      {
        grpstatistic.mRelativeGewinnProcent_Min          = d1.mRelativeGewinnProzent;
        grpstatistic.mRelativeGewinnProcent_Min_Besitzer = d1.mAgentName;
      }
      /***************************************************************/

      grpstatistic.mAbsoluteGewinnProcent_Summe  = grpstatistic.mAbsoluteGewinnProcent_Summe +
                                                   d1.mAbsoluteGewinnProzent;

      if ( d1.mAbsoluteGewinnProzent > grpstatistic.mAbsoluteGewinnProcent_Max )
      {
        grpstatistic.mAbsoluteGewinnProcent_Max          = d1.mAbsoluteGewinnProzent;
        grpstatistic.mAbsoluteGewinnProcent_Max_Besitzer = d1.mAgentName;
      }

      if ( d1.mAbsoluteGewinnProzent < grpstatistic.mAbsoluteGewinnProcent_Min )
      {
        grpstatistic.mAbsoluteGewinnProcent_Min          = d1.mAbsoluteGewinnProzent;
        grpstatistic.mAbsoluteGewinnProcent_Min_Besitzer = d1.mAgentName;
      }
      /***************************************************************/

    }

    // Calculate average values

   grpstatistic.mRelativeGewinnProcent_Average = grpstatistic.mRelativeGewinnProcent_Summe / grpstatistic.mAgentAnzahl;
   grpstatistic.mAbsoluteGewinnProcent_Average = grpstatistic.mAbsoluteGewinnProcent_Summe / grpstatistic.mAgentAnzahl;
   grpstatistic.mBuyMenge_Average              = grpstatistic.mBuyMenge_Total              / grpstatistic.mAgentAnzahl;
   grpstatistic.mSellMenge_Average             = grpstatistic.mSellMenge_Total             / grpstatistic.mAgentAnzahl;
   grpstatistic.mTypeChangeCounter             = grpstatistic.mTypeChangeCounter           / grpstatistic.mAgentAnzahl;

   return grpstatistic;

  }

  public static void printDepotRecordTitel( java.io.PrintStream  pPS )
  {
      pPS.print  ( "AgentName ;");
      pPS.print  ( "InitTypeName;");
      pPS.print  ( "RelativeGewinnProzent;");
      pPS.print  ( "AbsoluteGewinnProzent ;");
      pPS.print  ( "TotalBuyStuck;");
      pPS.println( "TotalSellStuck ;");
  }

  /**
  public static void printDepotRecord(DepotRecord pDepotRecord, java.io.PrintStream  pPS )
  {
       pPS.print  ( pDepotRecord.mAgentName + ";");
       pPS.print  ( pDepotRecord.mAgentInitTypeName + ";");
       pPS.print  ( pDepotRecord.mRelativeGewinnProzent + ";");
       pPS.print  ( pDepotRecord.mAbsoluteGewinnProzent + ";");
       pPS.print  ( pDepotRecord.mTotalBuyStuck + ";");
       pPS.println( pDepotRecord.mTotalSellStuck + ";");
  }
  */

  public void PrintStatistic(java.io.PrintStream  pPS )
  {
     printAgentGroupStatisticWertTitle( pPS );
     Iterator hh =  this.mGroupStatic.keySet().iterator();
     while ( hh.hasNext() )
     {
        Object key = hh.next();
        AgentGroupStatisticBasicWert ww = ( AgentGroupStatisticBasicWert )  this.mGroupStatic.get( key );
        this.printAgentGroupStatisticWert( ww, pPS );
     }
  }

  public static void printAgentGroupStatisticWertTitle( java.io.PrintStream  pPS )
  {
       pPS.print    ( "AgentType;");
       pPS.print    ( "Anzahl ;");
       pPS.print    ( "AbsoluteGewinnProcent_Average;");
       pPS.print    ( "AbsoluteGewinnProcent_Max;");
       pPS.print    ( "AgentName;");
       pPS.print    ( "RelativeGewinnProcent_Average;");
       pPS.print    ( "RelativeGewinnProcent_Max;");
       pPS.print    ( "AverageBuyMeng;");
       pPS.println  ( "AverageSellMeng;");
  }

  private void printAgentGroupStatisticWert( AgentGroupStatisticBasicWert pWert, java.io.PrintStream  pPS )
  {

       pPS.print  ( pWert.mAgentTypeName + ";");
       pPS.print  ( pWert.mAgentAnzahl + ";");
       pPS.print  ( mDataFormatter.format2str( pWert.mAbsoluteGewinnProcent_Average ) + ";");
       pPS.print  ( mDataFormatter.format2str( pWert.mAbsoluteGewinnProcent_Max ) + ";");
       pPS.print  ( pWert.mAbsoluteGewinnProcent_Max_Besitzer + ";");
       pPS.print  ( mDataFormatter.format2str( pWert.mRelativeGewinnProcent_Average ) + ";");
       pPS.print  ( mDataFormatter.format2str( pWert.mRelativeGewinnProcent_Max     ) + ";");
       pPS.print  ( pWert.mRelativeGewinnProcent_Max_Besitzer + ";");
       pPS.print  ( mDataFormatter.format2str(  pWert.mBuyMenge_Average ) + ";");
       pPS.println( mDataFormatter.format2str(  pWert.mSellMenge_Average ) + ";");

  }

  public void addDepotRecord2Vector ( String pAgentname, DepotRecord pDepotRecord )
  {
      this.mDepotList.add(pDepotRecord);

  }

  public static void addDepotRecord ( String pAgentname, DepotRecord pDepotRecord )
  {
      mGewinnProcessor.addDepotRecord2Vector( pAgentname, pDepotRecord );
  }

  /**
   * Print one DepotRecord into a PrintStream using defined NumberFormter in Text Format
   * @param pNr
   * @param pDepot
   * @param fw
   * @param ffm
   */

  public static void PrintOneDepotRecord_TextFormat ( int pNr, DepotRecord pDepot, java.io.PrintStream fw, NumberFormat ffm, String pSeperator )
  {
       fw.print( pNr + pSeperator);
       fw.print( pDepot.mAgentName +pSeperator);
       fw.print( pDepot.mAgentInitTypeName +pSeperator );
       fw.print( ffm.format(  pDepot.mAbsoluteGewinnProzent ) +pSeperator );
       fw.print( pDepot.AktienMarket_getInitDepot() +pSeperator );
       fw.print( pDepot.AktienMarket_getCurrentDepot() +pSeperator ) ; // CurrentDepot is auch EndDepot
       fw.print( pDepot.mTotalBuyStuck +pSeperator);
       fw.print( pDepot.mTotalSellStuck +pSeperator );
       fw.print( pDepot.mTypeChangeCounter +pSeperator);
       fw.print( "depot/" + pDepot.mAgentName + ".csv" + pSeperator );

       fw.print( pDepot.AktienMarket_getInitPrice() + pSeperator );
       fw.print( pDepot.AktienMarket_getInitAktienMenge() + pSeperator );
       fw.print( pDepot.AktienMarket_getInitCash() + pSeperator );

       fw.print( pDepot.AktienMarket_getCurrentPrice() + pSeperator );
       fw.print( pDepot.AktienMarket_getCurrentAktienMenge() + pSeperator );
       fw.print( pDepot.AktienMarket_getCurrentCash() + pSeperator );
       fw.println();
  }


  /**
   * Print one DepotRecord into a PrintStream using defined NumberFormter in Text Format
   * @param pNr
   * @param pDepot
   * @param fw
   * @param ffm
   */

  public static void PrintDepotRecord_Summe_TextFormat ( String pSumText, DepotRecord pDepot, java.io.PrintStream fw, NumberFormat ffm, String pSeperator )
  {
       fw.print( pSumText + pSeperator);
       fw.print( "-" +pSeperator);
       fw.print( "-" +pSeperator );
       fw.print( "-" +pSeperator );
       fw.print( pDepot.AktienMarket_getInitDepot() +pSeperator );
       fw.print( pDepot.AktienMarket_getCurrentDepot() +pSeperator ) ; // CurrentDepot is auch EndDepot
       fw.print( pDepot.mTotalBuyStuck +pSeperator);
       fw.print( pDepot.mTotalSellStuck +pSeperator );
       fw.print( "-" +pSeperator);
       fw.print( "-" + pSeperator );

       fw.print( pDepot.AktienMarket_getInitPrice() + pSeperator );
       fw.print( pDepot.AktienMarket_getInitAktienMenge() + pSeperator );
       fw.print( pDepot.AktienMarket_getInitCash() + pSeperator );

       fw.print( pDepot.AktienMarket_getCurrentPrice() + pSeperator );
       fw.print( pDepot.AktienMarket_getCurrentAktienMenge() + pSeperator );
       fw.print( pDepot.AktienMarket_getCurrentCash() + pSeperator );
       fw.println();
  }



  /**
   * Print one DepotRecord into a PrintStream using defined NumberFormter
   * in HTML Format
   * @param pNr
   * @param pDepot
   * @param fw
   * @param ffm
   */

  public static void PrintOneDepotRecord_HTMLFormat ( int pNr, DepotRecord pDepot, java.io.PrintStream fw, NumberFormat ffm )
  {

       fw.print( "<TR>" );
       fw.print( "<TD>" + pNr + "</TD>" );
       fw.print( "<TD>" + pDepot.mAgentName +"</TD>");
       fw.print( "<TD>" + pDepot.mAgentInitTypeName +"</TD>" );
       fw.print( "<TD>" + ffm.format( pDepot.mAbsoluteGewinnProzent ) +"</TD>" );
       fw.print( "<TD>" + pDepot.AktienMarket_getInitDepot() +"</TD>" );
       fw.print( "<TD>" + pDepot.AktienMarket_getCurrentDepot() +"</TD>" ) ; // CurrentDepot is auch EndDepot
       fw.print( "<TD>" + pDepot.mTotalBuyStuck +"</TD>");
       fw.print( "<TD>" + pDepot.mTotalSellStuck +"</TD>" );
       fw.print( "<TD>" + pDepot.mTypeChangeCounter +"</TD>");
       fw.print( "<TD>" );

       String depothistoryfilename = "";

       if ( pDepot.mAgentInitType == SystemConstant.AgentType_INVESTOR )
       {
         depothistoryfilename = "depot/F-" + pDepot.mAgentName + ".csv";
       };

       if ( pDepot.mAgentInitType == SystemConstant.AgentType_NOISETRADER )
       {
         depothistoryfilename = "depot/N-" + pDepot.mAgentName + ".csv";
       };

       if ( pDepot.mAgentInitType == SystemConstant.AgentType_BLANKOAGENT )
       {
         depothistoryfilename = "depot/B-" + pDepot.mAgentName + ".csv";
       };

       if ( pDepot.mAgentInitType == SystemConstant.AgentType_RANDOMTRADER )
       {
         depothistoryfilename = "depot/R-" + pDepot.mAgentName + ".csv";
       };

       HTMLCreator.putFileLinkwithNewWindow( fw, pDepot.mAgentName, depothistoryfilename, "newwindow" );
       fw.print( "</TD>" );

       fw.print( "<TD>" + pDepot.AktienMarket_getInitPrice() + "</TD>" );
       fw.print( "<TD>" + pDepot.AktienMarket_getInitAktienMenge() + "</TD>" );
       fw.print( "<TD>" + pDepot.AktienMarket_getInitCash() + "</TD>" );
       fw.print( "<TD>" + pDepot.AktienMarket_getCurrentPrice() + "</TD>" );
       fw.print( "<TD>" + pDepot.AktienMarket_getCurrentAktienMenge() + "</TD>" );
       fw.print( "<TD>" + pDepot.AktienMarket_getCurrentCash() + "</TD>" );
       fw.println( "</TR>" );

  }

  /**
   * Print one DepotRecord Summe into a PrintStream using defined NumberFormter
   * in HTML Format
   * @param pNr
   * @param pDepot
   * @param fw
   * @param ffm
   */

  public static void PrintOneDepotRecordSumme_HTMLFormat ( DepotRecord pDepot, java.io.PrintStream fw, NumberFormat ffm, int pAgentAnzahl )
  {

       fw.print( "<TR>" );
       fw.print( "<TD></TD>" );
       fw.print( "<TD>Summe</TD>");
       fw.print( "<TD></TD>" );
       fw.print( "<TD>" + ffm.format(  pDepot.mAbsoluteGewinnProzent/pAgentAnzahl ) +"</TD>" );
       fw.print( "<TD>" + pDepot.AktienMarket_getInitDepot() +"</TD>" );
       fw.print( "<TD>" + pDepot.AktienMarket_getCurrentDepot() +"</TD>" ) ; // CurrentDepot is auch EndDepot
       fw.print( "<TD>" + pDepot.mTotalBuyStuck +"</TD>");
       fw.print( "<TD>" + pDepot.mTotalSellStuck +"</TD>" );
       fw.print( "<TD>" + pDepot.mTypeChangeCounter +"</TD>");
       fw.print( "<TD></TD>" );
       fw.print( "<TD>" + pDepot.AktienMarket_getInitPrice() + "</TD>" );
       fw.print( "<TD>" + pDepot.AktienMarket_getInitAktienMenge() + "</TD>" );
       fw.print( "<TD>" + pDepot.AktienMarket_getInitCash() + "</TD>" );

       fw.print( "<TD>" + pDepot.AktienMarket_getCurrentPrice() + "</TD>" );
       fw.print( "<TD>" + pDepot.AktienMarket_getCurrentAktienMenge() + "</TD>" );
       fw.print( "<TD>" + pDepot.AktienMarket_getCurrentCash() + "</TD>" );

       fw.println( "</TR>" );

  }

  public static void createDepotStatistic_TextFile(String pDepotListTextFile )
  {
    // print statistic into a text file ( CSV format )

    // Use configured Language

    NumberFormat ffm = HelpTool.getNumberFormat( Configurator.mConfData.mDataFormatLanguage );
    ffm.setMaximumFractionDigits(4);

    ffm.setMinimumFractionDigits(3);
    ffm.setMaximumFractionDigits(3);

    java.io.PrintStream  fw;
    String DataSeperator = ";";

    try
    {

    fw = new java.io.PrintStream( new java.io.FileOutputStream ( pDepotListTextFile ) );
    // print some space lines
    fw.println();
    fw.println();
    fw.println();
    fw.println("Sorted by Name ");
    fw.println();

    fw.print( "Nr.;Name;InitType;Profit(%);" );
    fw.print( "InitDepot;EndDepot;BuySumme;SellSumme;TypChanges;DetailedAbwicklung;");
    fw.println( "InitPrice;InitMenge;InitCash;EndPreis;EndMenge;EndCash;");

    /*
    Nr.	Name	InitType	GewinnProcent(%)	InitDepot	EndDepot	Kaufsumme
    (Stück)	VerkaufSumme
    (Stück)	TypWechsel	Detailedabwicklung	InitPreis	InitCash	InitMenge	EndCash	EndMenge	EndPreis
    */

     // create a text file

     DepotRecord dd[] = mGewinnProcessor.sortedbyName( mGewinnProcessor.mDepotList    );

     DepotRecord sum = new DepotRecord ();

     // print depot sorted by name
     for ( int i=0; i < dd.length; i++ )
     {
          PrintOneDepotRecord_TextFormat ( (i+1), dd[i], fw, ffm, DataSeperator );

          sum.mInitDepot       =  sum.mInitDepot + dd[i].mInitDepot;
          sum.mCurrentDepot    =  sum.mCurrentDepot + dd[i].mCurrentDepot;
          sum.mTotalBuyStuck   =  sum.mTotalBuyStuck + dd[i].mTotalBuyStuck;
          sum.mTotalSellStuck  =  sum.mTotalSellStuck + dd[i].mTotalSellStuck;

          sum.mInitAktienMenge =  sum.mInitAktienMenge + dd[i].mInitAktienMenge;
          sum.mInitCash        =  sum.mInitCash + dd[i].mInitCash;
          sum.mInitPrice       =  dd[i].mInitPrice;

          sum.mCurrentCash    =   sum.mCurrentCash + dd[i].mCurrentCash;
          sum.mCurrentAktienMenge = sum.mCurrentAktienMenge + dd[i].mCurrentAktienMenge;
          sum.mCurrentPrice       = dd[i].mCurrentPrice;

     }

     PrintDepotRecord_Summe_TextFormat("sum", sum , fw, ffm, ";");

     fw.println();
     fw.println();
     fw.println("Sorted by absolute Profit(%)");
     fw.println();

     sum = new DepotRecord ();

     fw.print( "Nr.;Name;InitType;Profit(%);" );
     fw.print( "InitDepot;EndDepot;BuySumme;SellSumme;TypChanges;DetailedAbwicklung;");
     fw.println( "InitPrice;InitMenge;InitCash;EndPreis;EndMenge;EndCash;");

     dd = mGewinnProcessor.sortedbyAbsoluteGewinn( mGewinnProcessor.mDepotList  );
     // print depot sorted by AbsoluteGewinn
     for ( int i=0; i < dd.length; i++ )
     {
          PrintOneDepotRecord_TextFormat ( (i+1), dd[i], fw, ffm, DataSeperator );
          sum.mInitDepot       =  sum.mInitDepot + dd[i].mInitDepot;
          sum.mCurrentDepot    =  sum.mCurrentDepot + dd[i].mCurrentDepot;
          sum.mTotalBuyStuck   =  sum.mTotalBuyStuck + dd[i].mTotalBuyStuck;
          sum.mTotalSellStuck  =  sum.mTotalSellStuck + dd[i].mTotalSellStuck;

          sum.mInitAktienMenge =  sum.mInitAktienMenge + dd[i].mInitAktienMenge;
          sum.mInitCash        =  sum.mInitCash + dd[i].mInitCash;
          sum.mInitPrice       =  dd[i].mInitPrice;

          sum.mCurrentCash    =   sum.mCurrentCash + dd[i].mCurrentCash;
          sum.mCurrentAktienMenge = sum.mCurrentAktienMenge + dd[i].mCurrentAktienMenge;
          sum.mCurrentPrice       = dd[i].mCurrentPrice;
     }
     PrintDepotRecord_Summe_TextFormat("sum", sum , fw, ffm, ";");

     fw.println();
     fw.println();
     fw.println();
     // close the depot file

     fw.close();

    }
    catch ( Exception ex )
    {
         ex.printStackTrace();
    }
  }

  public static void createDepotStatistic_HTMLFile( String  pDepotListHTMLFileName   )
  {
    //*********************************************************
    //create a HTML file  ( Table Format )

    java.io.PrintStream  fw = null;
    NumberFormat ffm = HelpTool.getNumberFormat(  Configurator.mConfData.mDataFormatLanguage );
    ffm.setMaximumFractionDigits(4);

    try
    {
       fw = new java.io.PrintStream( new java.io.FileOutputStream ( pDepotListHTMLFileName ) );
    }
    catch (Exception ex)
    {
       ex.printStackTrace();
    }

    // Print Vergleich Overview
    fw.println( "<br>Group Statistic comparation<br> " );

    AgentGroupStatisticBasicWert bb = mGewinnProcessor.CreateGroupStatistik( mGewinnProcessor.getDepotListByType( SystemConstant.AgentType_INVESTOR,  mGewinnProcessor.mDepotList ) ) ;

    de.marketsim.util.AgentGroupStatisticAllNetworks.addNewStatistic( Configurator.mConfData.mNetworkfile_OhnePfad_CurrentUsed, SystemConstant.AgentType_INVESTOR,  bb   );
    PrintGroupStatisticTableHead( fw );

    // Parameter "F" stands for Fundamental i.e. Investor
    PrintGroupStatistic( fw, bb, "Fundamental", "F", ffm );

    // Parameter "N" stands for Trend i.e. NoiseTrader
    bb = mGewinnProcessor.CreateGroupStatistik( mGewinnProcessor.getDepotListByType( SystemConstant.AgentType_NOISETRADER,  mGewinnProcessor.mDepotList ) ) ;
    PrintGroupStatistic( fw, bb, "Trend", "N", ffm );
    // add into TotalList which are used to generate FinalStatistic
    de.marketsim.util.AgentGroupStatisticAllNetworks.addNewStatistic( Configurator.mConfData.mNetworkfile_OhnePfad_CurrentUsed, SystemConstant.AgentType_NOISETRADER,  bb   );

    // Parameter "B" stands for BlankoAgent
    bb = mGewinnProcessor.CreateGroupStatistik( mGewinnProcessor.getDepotListByType( SystemConstant.AgentType_BLANKOAGENT,  mGewinnProcessor.mDepotList ) ) ;
    PrintGroupStatistic( fw, bb, "Blanko", "B",ffm );

    // add into TotalList which are used to generate FinalStatistic
    de.marketsim.util.AgentGroupStatisticAllNetworks.addNewStatistic( Configurator.mConfData.mNetworkfile_OhnePfad_CurrentUsed, SystemConstant.AgentType_BLANKOAGENT,  bb   );

    // Parameter "R" stands for RandomTrader
    bb = mGewinnProcessor.CreateGroupStatistik( mGewinnProcessor.getDepotListByType( SystemConstant.AgentType_RANDOMTRADER,  mGewinnProcessor.mDepotList ) ) ;
    PrintGroupStatistic( fw, bb, "Random", "R", ffm );
    // add into TotalList which are used to generate FinalStatistic
    de.marketsim.util.AgentGroupStatisticAllNetworks.addNewStatistic( Configurator.mConfData.mNetworkfile_OhnePfad_CurrentUsed, SystemConstant.AgentType_RANDOMTRADER,  bb   );

    fw.println("</Table>");

    fw.println("Remarks:<BR>");

    fw.println("1) AVG Profit(%)   =  ( Sum of Profit ) / AgentNumber <BR>");
    fw.println("2) AVG Buy         =  ( Sum of Buy of single agent ) / AgentNumber<BR>");
    fw.println("3) AVG Sell        =  ( Sum of Sell of single agent ) / AgentNumber<BR>");
    fw.println("4) AVG TypeChange  =  ( Sum of Typ change ) / AgentNumber<BR>");
    fw.println("5) Agent name of max profit is the Agent who has the maximal Profit in its group.<BR>");
    fw.println("6) Agent name of min profit is the Agent who has the minimal Profit in its group.<BR>");
    fw.println("7) Count of type change: If an agent changes its type to another type, count is increased with 1, <br>");
    fw.println("and when it changes back to its original type, count is also increased with 1. <BR>");


    // Print Table Title in HTML Format
    PrintGroupStatisticDetailTableHead( fw, "Fundamental" );

    // get all Investor DepotList
    DepotRecord dd[] = mGewinnProcessor.getDepotListByType( SystemConstant.AgentType_INVESTOR,  mGewinnProcessor.mDepotList );
    DepotRecord sorteddd[] = mGewinnProcessor.sortedbyAbsoluteGewinn( dd );
    DepotRecord summe_investor = new DepotRecord();

    for ( int i=0; i< dd.length; i++ )
    {
         PrintOneDepotRecord_HTMLFormat((i+1), sorteddd[i], fw, ffm );
         summe_investor.mInitAktienMenge       = summe_investor.mInitAktienMenge       + dd[i].mInitAktienMenge;
         summe_investor.mInitCash              = summe_investor.mInitCash              + dd[i].mInitCash;
         summe_investor.mInitDepot             = summe_investor.mInitDepot             + dd[i].mInitDepot;
         summe_investor.mAbsoluteGewinnProzent = summe_investor.mAbsoluteGewinnProzent + dd[i].mAbsoluteGewinnProzent;
         summe_investor.mTotalBuyStuck         = summe_investor.mTotalBuyStuck         + dd[i].mTotalBuyStuck;
         summe_investor.mTotalSellStuck        = summe_investor.mTotalSellStuck        + dd[i].mTotalSellStuck;
         summe_investor.mTypeChangeCounter     = summe_investor.mTypeChangeCounter     + dd[i].mTypeChangeCounter;
         summe_investor.mCurrentCash           = summe_investor.mCurrentCash           + dd[i].mCurrentCash;
         summe_investor.mCurrentAktienMenge    = summe_investor.mCurrentAktienMenge    + dd[i].mCurrentAktienMenge;
         summe_investor.mCurrentDepot          = summe_investor.mCurrentDepot          + dd[i].mCurrentDepot;

    }

    // Print summe of Investor
    PrintOneDepotRecordSumme_HTMLFormat( summe_investor, fw, ffm, dd.length );
    fw.println("</Table>");

    // Print Table Title in HTML Format
    PrintGroupStatisticDetailTableHead( fw, "Trend" );

    dd = mGewinnProcessor.getDepotListByType( SystemConstant.AgentType_NOISETRADER,  mGewinnProcessor.mDepotList );
    sorteddd = mGewinnProcessor.sortedbyAbsoluteGewinn( dd );

    DepotRecord summe_noisetrader = new DepotRecord();
    for ( int i=0; i< dd.length; i++ )
    {
         PrintOneDepotRecord_HTMLFormat((i+1), sorteddd[i], fw, ffm );
         summe_noisetrader.mInitAktienMenge       = summe_noisetrader.mInitAktienMenge       + dd[i].mInitAktienMenge;
         summe_noisetrader.mInitCash              = summe_noisetrader.mInitCash              + dd[i].mInitCash;
         summe_noisetrader.mInitDepot             = summe_noisetrader.mInitDepot             + dd[i].mInitDepot;
         summe_noisetrader.mAbsoluteGewinnProzent = summe_noisetrader.mAbsoluteGewinnProzent + dd[i].mAbsoluteGewinnProzent;
         summe_noisetrader.mTotalBuyStuck         = summe_noisetrader.mTotalBuyStuck         + dd[i].mTotalBuyStuck;
         summe_noisetrader.mTotalSellStuck        = summe_noisetrader.mTotalSellStuck        + dd[i].mTotalSellStuck;
         summe_noisetrader.mTypeChangeCounter     = summe_noisetrader.mTypeChangeCounter     + dd[i].mTypeChangeCounter;
         summe_noisetrader.mCurrentCash           = summe_noisetrader.mCurrentCash           + dd[i].mCurrentCash;
         summe_noisetrader.mCurrentAktienMenge    = summe_noisetrader.mCurrentAktienMenge    + dd[i].mCurrentAktienMenge;
         summe_noisetrader.mCurrentDepot          = summe_noisetrader.mCurrentDepot          + dd[i].mCurrentDepot;
    }
    // Print summe of NoiseTrader
    PrintOneDepotRecordSumme_HTMLFormat( summe_noisetrader, fw, ffm, dd.length );
    fw.println("</Table>");

    PrintGroupStatisticDetailTableHead( fw, "Blanko" );

    dd = mGewinnProcessor.getDepotListByType( SystemConstant.AgentType_BLANKOAGENT,  mGewinnProcessor.mDepotList );
    sorteddd = mGewinnProcessor.sortedbyAbsoluteGewinn( dd );

    DepotRecord summe_blanko = new DepotRecord();
    for ( int i=0; i< dd.length; i++ )
    {
         PrintOneDepotRecord_HTMLFormat((i+1), sorteddd[i], fw, ffm );
         summe_blanko.mInitAktienMenge       = summe_blanko.mInitAktienMenge       + dd[i].mInitAktienMenge;
         summe_blanko.mInitCash              = summe_blanko.mInitCash              + dd[i].mInitCash;
         summe_blanko.mInitDepot             = summe_blanko.mInitDepot             + dd[i].mInitDepot;
         summe_blanko.mAbsoluteGewinnProzent = summe_blanko.mAbsoluteGewinnProzent + dd[i].mAbsoluteGewinnProzent;
         summe_blanko.mTotalBuyStuck         = summe_blanko.mTotalBuyStuck         + dd[i].mTotalBuyStuck;
         summe_blanko.mTotalSellStuck        = summe_blanko.mTotalSellStuck        + dd[i].mTotalSellStuck;
         summe_blanko.mTypeChangeCounter     = summe_blanko.mTypeChangeCounter     + dd[i].mTypeChangeCounter;
         summe_blanko.mCurrentCash           = summe_blanko.mCurrentCash           + dd[i].mCurrentCash;
         summe_blanko.mCurrentAktienMenge    = summe_blanko.mCurrentAktienMenge    + dd[i].mCurrentAktienMenge;
         summe_blanko.mCurrentDepot          = summe_blanko.mCurrentDepot          + dd[i].mCurrentDepot;
    }
    // Print summe of Blanko
    PrintOneDepotRecordSumme_HTMLFormat( summe_blanko, fw, ffm, dd.length );
    fw.println("</Table>");

    PrintGroupStatisticDetailTableHead( fw, "Random" );

    dd = mGewinnProcessor.getDepotListByType( SystemConstant.AgentType_RANDOMTRADER,  mGewinnProcessor.mDepotList );
    sorteddd = mGewinnProcessor.sortedbyAbsoluteGewinn( dd );

    DepotRecord summe_randomtrader = new DepotRecord();
    for ( int i=0; i< dd.length; i++ )
    {
         PrintOneDepotRecord_HTMLFormat((i+1), sorteddd[i], fw, ffm );
         summe_randomtrader.mInitAktienMenge       = summe_randomtrader.mInitAktienMenge       + dd[i].mInitAktienMenge;
         summe_randomtrader.mInitCash              = summe_randomtrader.mInitCash              + dd[i].mInitCash;
         summe_randomtrader.mInitDepot             = summe_randomtrader.mInitDepot             + dd[i].mInitDepot;
         summe_randomtrader.mAbsoluteGewinnProzent = summe_randomtrader.mAbsoluteGewinnProzent + dd[i].mAbsoluteGewinnProzent;
         summe_randomtrader.mTotalBuyStuck         = summe_randomtrader.mTotalBuyStuck         + dd[i].mTotalBuyStuck;
         summe_randomtrader.mTotalSellStuck        = summe_randomtrader.mTotalSellStuck        + dd[i].mTotalSellStuck;
         summe_randomtrader.mTypeChangeCounter     = summe_randomtrader.mTypeChangeCounter     + dd[i].mTypeChangeCounter;
         summe_randomtrader.mCurrentCash           = summe_randomtrader.mCurrentCash           + dd[i].mCurrentCash;
         summe_randomtrader.mCurrentAktienMenge    = summe_randomtrader.mCurrentAktienMenge    + dd[i].mCurrentAktienMenge;
         summe_randomtrader.mCurrentDepot          = summe_randomtrader.mCurrentDepot          + dd[i].mCurrentDepot;
    }

    // Print summe of randomtrader
    PrintOneDepotRecordSumme_HTMLFormat( summe_randomtrader, fw, ffm, dd.length );
    // Table is end
    fw.println("</Table>");
    HTMLCreator.putHtmlBodyEnd( fw );
    HTMLCreator.putHtmlEnd( fw );
    fw.close();

  }

  public static void createDepotStatistic()
  {
      // create statistic
      String DepotList_TextFileName = Configurator.mConfData.getDepotListFile_TextFormat();
      String DepotList_HTMLFileName = Configurator.mConfData.getDepotListFile_SortedByGroup_HTMLFormat();
      createDepotStatistic_TextFile(DepotList_TextFileName );
      createDepotStatistic_HTMLFile( DepotList_HTMLFileName );

  }

  public static void PrintGroupStatisticDetailTableHead( java.io.PrintStream fw, String pGroupName )
  {


  fw.println( "<Table Border=2 >");

  fw.println( "<TR>");
  fw.println( "<TD> <H4>" + pGroupName + "<H4> </TD>");
  fw.println( "</TR>");

  fw.println( "<TR>");
  fw.println( "<TH>Nr</TH>");
  fw.println( "<TH>Name</TH>");
  fw.println( "<TH>InitType</TH>");
  fw.println( "<TH>Profit(%)</TH>");
  fw.println( "<TH>InitDepot</TH>");
  fw.println( "<TH>EndDepot</TH>");
  fw.println( "<TH>BuySumme</TH>");
  fw.println( "<TH>SellSumme</TH>");
  fw.println( "<TH>TypeChanges</TH>");
  fw.println( "<TH>Detailed</TH>");
  fw.println( "<TH>InitPrice</TH>");
  fw.println( "<TH>InitMenge</TH>");
  fw.println( "<TH>InitCash</TH>");
  fw.println( "<TH>EndPreis</TH>");
  fw.println( "<TH>EndMenge</TH>");
  fw.println( "<TH>EndCash</TH>");
  fw.print( "</TR>");
  }


  public static void PrintGroupStatisticTableHead( java.io.PrintStream fw )
  {

    fw.println("<Table Border=2 >");
    fw.println("<TR>");
    fw.println("<TH>GroupName</TH>");
    fw.println("<TH>Agent number</TH>");
    fw.println("<TH>AVG Profit(%)</TH>");
    fw.println("<TH>AVG Buy</TH>");
    fw.println("<TH>AVG Sell</TH>");
    fw.println("<TH>AVG Count of type change</TH>");

    fw.println("<TH>Max Profit(%)</TH>");
    fw.println("<TH>AgentName of MaxProfit</TH>");
    fw.println("<TH>Min Profit(%)</TH>");
    fw.println("<TH>AgentName of MinProfit</TH>");
    fw.println("</TR>");

  }


  public static void PrintGroupStatistic( java.io.PrintStream fw, AgentGroupStatisticBasicWert  pStatistic, String pGroupName, String pGroupType, NumberFormat ffm )
  {

    fw.println("<TR>");
    fw.println("<TD>" + pGroupName                                       + "</TD>");
    fw.println("<TD>" + ffm.format( pStatistic.mAgentAnzahl ) + "</TD>");
    fw.println("<TD>" + ffm.format( pStatistic.mAbsoluteGewinnProcent_Average ) + "</TD>");
    fw.println("<TD>" + ffm.format( pStatistic.mBuyMenge_Average )              + "</TD>");
    fw.println("<TD>" + ffm.format( pStatistic.mSellMenge_Average )             + "</TD>");
    fw.println("<TD>" + ffm.format( pStatistic.mTypeChangeCounter )             + "</TD>");

    fw.println("<TD>" + ffm.format ( pStatistic.mAbsoluteGewinnProcent_Max ) + "</TD>");
    fw.println("<TD>" );
    HTMLCreator.putFileLinkwithNewWindow( fw, pStatistic.mAbsoluteGewinnProcent_Max_Besitzer, "depot/" + pGroupType+ "-" + pStatistic.mAbsoluteGewinnProcent_Max_Besitzer + ".csv", "newwindow" );
    fw.print( "</TD>" );

    fw.println("<TD>" + ffm.format ( pStatistic.mAbsoluteGewinnProcent_Min ) + "</TH>");
    fw.println("<TD>" );
    HTMLCreator.putFileLinkwithNewWindow( fw, pStatistic.mAbsoluteGewinnProcent_Min_Besitzer, "depot/" + pGroupType+ "-" + pStatistic.mAbsoluteGewinnProcent_Min_Besitzer + ".csv", "newwindow" );
    fw.print( "</TD>" );

    // Nur für checking und debug
    //fw.print( "<TD>" + pStatistic.mAgentNameList + "</TD>" );

    fw.println("</TR>");

  }

  public static void main(String[] args)
  {

    GewinnProcessor pp1 = new GewinnProcessor();

    // self test code

    DepotRecord data[] = new DepotRecord[2];

    DepotRecord dd1 = new DepotRecord();
    dd1.mAgentInitType = SystemConstant.AgentType_NOISETRADER;
    dd1.mAgentName = "V1";
    dd1.mAgentInitTypeName     = "NoiseTrader";
    dd1.mAbsoluteGewinnProzent = -2.55;
    dd1.mRelativeGewinnProzent = 0.30;
    dd1.mTotalBuyStuck         = 100;
    dd1.mTotalSellStuck        = 100;
    pp1.addDepotRecord( "V1", dd1 );

    data[0] = dd1;

    dd1 = new DepotRecord();
    dd1.mAgentInitType = SystemConstant.AgentType_NOISETRADER;
    dd1.mAgentName = "V2";
    dd1.mAgentInitTypeName     = "NoiseTrader";
    dd1.mAbsoluteGewinnProzent = -3.45;
    dd1.mRelativeGewinnProzent = 0.60;
    dd1.mTotalBuyStuck         = 200;
    dd1.mTotalSellStuck        = 200;
    pp1.addDepotRecord( "V2", dd1 );

    data[1] = dd1;

    dd1 = new DepotRecord();

    dd1.mAgentName = "V3";
    dd1.mAgentInitType = SystemConstant.AgentType_NOISETRADER;

    dd1.mAgentInitTypeName     = "NoiseTrader";
    dd1.mAbsoluteGewinnProzent = -1.50;
    dd1.mRelativeGewinnProzent = 0.30;
    dd1.mTotalBuyStuck         = 300;
    dd1.mTotalSellStuck        = 300;
    pp1.addDepotRecord( "V3", dd1 );

    dd1 = new DepotRecord();

    dd1.mAgentName = "V4";
    dd1.mAgentInitType = SystemConstant.AgentType_INVESTOR;
    dd1.mAgentInitTypeName     = "Investor";
    dd1.mAbsoluteGewinnProzent = 0.20;
    dd1.mRelativeGewinnProzent = 0.35;
    dd1.mTotalBuyStuck         = 150;
    dd1.mTotalSellStuck        = 150;
    pp1.addDepotRecord( "V4", dd1 );

    dd1 = new DepotRecord();
    dd1.mAgentInitType = SystemConstant.AgentType_INVESTOR;

    dd1.mAgentName = "V5";
    dd1.mAgentInitTypeName     = "Investor";
    dd1.mAbsoluteGewinnProzent = 0.65;
    dd1.mRelativeGewinnProzent = 0.45;
    dd1.mTotalBuyStuck         = 250;
    dd1.mTotalSellStuck        = 250;
    pp1.addDepotRecord( "V5", dd1 );

    dd1 = new DepotRecord();
    dd1.mAgentName = "V6";
    dd1.mAgentInitType = SystemConstant.AgentType_INVESTOR;

    dd1.mAgentInitTypeName     = "Investor";
    dd1.mAbsoluteGewinnProzent = 0.75;
    dd1.mRelativeGewinnProzent = 0.15;
    dd1.mTotalBuyStuck         = 350;
    dd1.mTotalSellStuck        = 350;
    pp1.addDepotRecord( "V6", dd1 );

    dd1 = new DepotRecord();
    dd1.mAgentName = "V7";
    dd1.mAgentInitType = SystemConstant.AgentType_BLANKOAGENT;

    dd1.mAgentInitTypeName     = "BLANKO";
    dd1.mAbsoluteGewinnProzent = 0.75;
    dd1.mRelativeGewinnProzent = 0.40;
    dd1.mTotalBuyStuck         = 600;
    dd1.mTotalSellStuck        = 600;
    pp1.addDepotRecord( "V7", dd1 );

    dd1 = new DepotRecord();
    dd1.mAgentName = "V8";
    dd1.mAgentInitType = SystemConstant.AgentType_BLANKOAGENT;

    dd1.mAgentInitTypeName     = "BLANKO";
    dd1.mAbsoluteGewinnProzent = 0.85;
    dd1.mRelativeGewinnProzent = 0.30;
    dd1.mTotalBuyStuck         = 400;
    dd1.mTotalSellStuck        = 400;
    pp1.addDepotRecord( "V8", dd1 );

    dd1 = new DepotRecord();
    dd1.mAgentName = "V9";
    dd1.mAgentInitType = SystemConstant.AgentType_RANDOMTRADER;

    dd1.mAgentInitTypeName     = "RADNOM";
    dd1.mAbsoluteGewinnProzent = 0.85;
    dd1.mRelativeGewinnProzent = 0.30;
    dd1.mTotalBuyStuck         = 400;
    dd1.mTotalSellStuck        = 400;
    pp1.addDepotRecord( "V9", dd1 );

    dd1 = new DepotRecord();
    dd1.mAgentName = "V10";
    dd1.mAgentInitType = SystemConstant.AgentType_RANDOMTRADER;

    dd1.mAgentInitTypeName     = "RADNOM";
    dd1.mAbsoluteGewinnProzent = 0.85;
    dd1.mRelativeGewinnProzent = 0.30;
    dd1.mTotalBuyStuck         = 400;
    dd1.mTotalSellStuck        = 400;
    pp1.addDepotRecord( "V10", dd1 );


    AgentGroupStatisticBasicWert pp = CreateGroupStatistik( data );


    pp1.createDepotStatistic_TextFile("depotlist.txt" );
    pp1.createDepotStatistic_HTMLFile("depotlist.html" );

  }

}